name: Deploy Staging

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write

jobs:
  check_types:
    name: Typecheck JS files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            target/
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Cache typescript buildinfo
        uses: actions/cache@v3
        with:
          path: ts-out/
          key: ${{ runner.os }}-ts-out

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: "latest"

      - name: Typecheck the code
        run: pnpm lint:types --write

  check_formatting:
    name: Check formatting of JS files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            target/
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: "latest"

      - name: Lint the code
        run: pnpm lint:format

  check_linting_js:
    name: Lint JS files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            target/
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: "latest"

      - name: Lint the code
        run: pnpm lint:practices

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: llvm-tools-preview

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            target/
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: "latest"

      - name: Setup cargo llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Setup nextest
        uses: taiki-e/install-action@nextest

      - name: Test code
        run: pnpm test:cov

      - name: Create rust code coverage
        run: |-
          pnpm test:cov --filter=core -- --no-run --lcov --output-path=lcov.info

      - name: Publish code coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy_to_staging:
    name: Deploy to staging
    needs:
      - check_types
      - check_formatting
      - check_linting_js
      - run_tests
    environment:
      name: Staging
      url: ${{ steps.publish-client.outputs.url }}
    outputs:
      url: ${{ steps.publish-client.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: >-
          pnpm install --frozen-lockfile --strict-peer-dependencies --production

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            target/
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Setup wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: "latest"

      - name: Build the client
        run: pnpm build:web
        env:
          CLIENT_PLATFORM: browser
          CLIENT_SENTRY_ENVIRONMENT: staging
          CLIENT_SENTRY_DSN: "${{ secrets.CLIENT_SENTRY_DSN }}"
          CLIENT_SENTRY_AUTH_TOKEN: ${{ secrets.CLIENT_SENTRY_AUTH_TOKEN }}

      - name: Publish client to cloudflare
        id: publish-client
        working-directory: packages/client/
        run: |
          if [[ "${{ github.ref }}" =~ refs/pull/.+ ]]; then
            # Pull requests deploy to their own staging environments
            : "${{ github.ref }}"
            : ${_%%\/merge}  # Remove 'merge' at the end
            : ${_//refs\/pull\/}  # Remove 'refs' at the beginning
            TARGET="pull request ${_}"
          else
            TARGET="${{ github.ref_name }}"
          fi

          # Use wrangler to manually deploy to cloudflare
          pnpm dlx wrangler pages publish www/ --project-name=qendil-staging \
            --branch="$TARGET" --commit-dirty=true | tee wrangler.out

          # Parse the output URL from the wrangler output
          TARGET_URL=$(grep -oE "https?://.+" wrangler.out | tail -n1)
          if [[ "$TARGET_URL" ]]; then
            echo "::set-output name=url::$TARGET_URL"
          else
            echo "Failed to find URL for deployment"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

  check_lighthouse:
    name: Run lighthouse check
    runs-on: ubuntu-latest
    needs:
      - deploy_to_staging
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v9
        id: run_lighthouse
        with:
          urls: ${{ needs.deploy_to_staging.outputs.url }}
          runs: 3
          temporaryPublicStorage: true
          configPath: packages/client/.lighthouserc.yml

      - name: Generate markdown
        if: ${{ (success() || failure()) && github.event_name == 'pull_request' }}
        id: generate_markdown
        run: |
          PERFORMANCE_SCORE=$(echo "$LIGHTHOUSE_MANIFEST" | jq '. | map(select(.isRepresentativeRun == true)) | first | .summary.performance * 100')
          ACCESSIBILITY_SCORE=$(echo "$LIGHTHOUSE_MANIFEST" | jq '. | map(select(.isRepresentativeRun == true)) | first | .summary.accessibility * 100')
          BEST_PRACTICES_SCORE=$(echo "$LIGHTHOUSE_MANIFEST" | jq '. | map(select(.isRepresentativeRun == true)) | first | .summary["best-practices"] * 100')
          SEO_SCORE=$(echo "$LIGHTHOUSE_MANIFEST" | jq '. | map(select(.isRepresentativeRun == true)) | first | .summary.seo * 100')
          PWA_SCORE=$(echo "$LIGHTHOUSE_MANIFEST" | jq '. | map(select(.isRepresentativeRun == true)) | first | .summary.pwa * 100')

          if ((PERFORMANCE_SCORE > 90)); then
            PERFORMANCE_COLOR="brightgreen"
          elif ((PERFORMANCE_SCORE > 80)); then
            PERFORMANCE_COLOR="green"
          elif ((PERFORMANCE_SCORE > 70)); then
            PERFORMANCE_COLOR="yellow"
          else
            PERFORMANCE_COLOR="red"
          fi

          if ((ACCESSIBILITY_SCORE > 90)); then
            ACCESSIBILITY_COLOR="brightgreen"
          elif ((ACCESSIBILITY_SCORE > 80)); then
            ACCESSIBILITY_COLOR="green"
          elif ((ACCESSIBILITY_SCORE > 70)); then
            ACCESSIBILITY_COLOR="yellow"
          else
            ACCESSIBILITY_COLOR="red"
          fi

          if ((BEST_PRACTICES_SCORE > 90)); then
            BEST_PRACTICES_COLOR="brightgreen"
          elif ((BEST_PRACTICES_SCORE > 80)); then
            BEST_PRACTICES_COLOR="green"
          elif ((BEST_PRACTICES_SCORE > 70)); then
            BEST_PRACTICES_COLOR="yellow"
          else
            BEST_PRACTICES_COLOR="red"
          fi

          if ((SEO_SCORE > 90)); then
            SEO_COLOR="brightgreen"
          elif ((SEO_SCORE > 80)); then
            SEO_COLOR="green"
          elif ((SEO_SCORE > 70)); then
            SEO_COLOR="yellow"
          else
            SEO_COLOR="red"
          fi

          if ((PWA_SCORE > 90)); then
            PWA_COLOR="brightgreen"
          elif ((PWA_SCORE > 80)); then
            PWA_COLOR="green"
          elif ((PWA_SCORE > 70)); then
            PWA_COLOR="yellow"
          else
            PWA_COLOR="red"
          fi

          LIGHTHOUSE_REPORT_URL=$(echo "$LIGHTHOUSE_LINKS" | jq -r '. | to_entries | first.value')

          LIGHTHOUSE_COMMENT=$(cat << EOF
            ## Lighthouse report

            ![Performance](
            https://img.shields.io/badge/Performance-$PERFORMANCE_SCORE-$PERFORMANCE_COLOR?style=flat-square) ![Accessibility](
            https://img.shields.io/badge/Accessibility-$ACCESSIBILITY_SCORE-$ACCESSIBILITY_COLOR?style=flat-square) ![Best practices](
            https://img.shields.io/badge/Best_Practices-$BEST_PRACTICES_SCORE-$BEST_PRACTICES_COLOR?style=flat-square) ![SEO](
            https://img.shields.io/badge/SEO-$SEO_SCORE-$SEO_COLOR?style=flat-square) ![PWA](
            https://img.shields.io/badge/PWA-$PWA_SCORE-$PWA_COLOR?style=flat-square)

            [Lighthouse Report]($LIGHTHOUSE_REPORT_URL)
          EOF)

          echo "LIGHTHOUSE_COMMENT<<EOF" >> $GITHUB_ENV
          echo "$LIGHTHOUSE_COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          LIGHTHOUSE_MANIFEST: ${{ steps.run_lighthouse.outputs.manifest }}
          LIGHTHOUSE_LINKS: ${{ steps.run_lighthouse.outputs.links }}

      - name: Comment lighthouse status
        if: ${{ (success() || failure()) && github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ${{ env.LIGHTHOUSE_COMMENT }}
          comment_includes: "## Lighthouse report"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
