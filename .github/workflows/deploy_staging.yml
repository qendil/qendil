name: Deploy Staging

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_types:
    name: Typecheck files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"
      - name: Install dependencies
        run: >-
          pnpm install
          --frozen-lockfile
          --strict-peer-dependencies
          --no-optional
      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"
      - name: Cache typescript buildinfo
        uses: actions/cache@v3
        with:
          path: ts-out
          key: ts-out
      - name: Lint the code
        run: pnpm lint:types --write

  check_formatting:
    name: Check files formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"
      - name: Install dependencies
        run: >-
          pnpm install
          --frozen-lockfile
          --strict-peer-dependencies
          --no-optional
      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"
      - name: Lint the code
        run: pnpm lint:format

  check_linting:
    name: Lint files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"
      - name: Install dependencies
        run: >-
          pnpm install
          --frozen-lockfile
          --strict-peer-dependencies
          --no-optional
      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"
      - name: Lint the code
        run: pnpm lint:practices

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"
      - name: Install dependencies
        run: >-
          pnpm install
          --frozen-lockfile
          --strict-peer-dependencies
          --no-optional
      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"
      - name: Test the code
        run: pnpm test:cov
      - name: Publish code coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy_to_staging:
    name: Deploy to staging
    needs:
      - check_types
      - check_formatting
      - check_linting
      - run_tests
    environment:
      name: Staging
      url: ${{ steps.publish-client.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: >-
          pnpm install
          --frozen-lockfile
          --strict-peer-dependencies
          --no-optional
          --production

      - name: Build the client
        working-directory: client/
        run: pnpm build:browser
        env:
          CLIENT_PLATFORM: browser
          CLIENT_SENTRY_ENVIRONMENT: staging
          CLIENT_SENTRY_DSN: "${{ secrets.CLIENT_SENTRY_DSN }}"
          CLIENT_SENTRY_AUTH_TOKEN: ${{ secrets.CLIENT_SENTRY_AUTH_TOKEN }}

      - name: Publish client to cloudflare
        id: publish-client
        working-directory: client/
        run: |
          if [[ "${{ github.ref }}" =~ refs/pull/.+ ]]; then
            # Pull requests deploy to their own staging environments
            : "${{ github.ref }}"
            : ${_%%\/merge}  # Remove 'merge' at the end
            : ${_//refs\/pull\/}  # Remove 'refs' at the beginning
            TARGET="pull request ${_}"
          else
            TARGET="${{ github.ref_name }}"
          fi

          # Use wrangler to manually deploy to cloudflare
          pnpm dlx wrangler pages publish www/ --project-name=qendil-staging \
            --branch="$TARGET" --commit-dirty=true | tee wrangler.out

          # Parse the output URL from the wrangler output
          TARGET_URL=$(grep -oE "https?://.+" wrangler.out | tail -n1)
          if [[ "$TARGET_URL" ]]; then
            echo "::set-output name=url::$TARGET_URL"
          else
            echo "Failed to find URL for deployment"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
