name: Deploy Web

on:
  pull_request:
  push:
    tags:
    branches:
      - main

jobs:
  deploy_cloudflare:
    name: Deploy to CF pages
    environment:
      name: cloudflare
      url: ${{ steps.publish-client.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: "latest"

      - name: Setup Node with caching
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm i --frozen-lockfile --strict-peer-dependencies --production

      - name: Build the client
        working-directory: client/
        run: pnpm build

      - name: Publish client to cloudflare
        id: publish-client
        working-directory: client/
        run: |
          # Select the deployment target
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Tags deploy to production
            TARGET=production
          elif [[ "${{ github.ref_name }}" == "production" ]]; then
            # Prevent deploying to production from a branch called 'prduction'
            TARGET=production_
          elif [[ "${{ github.ref }}" =~ refs/pull/.+ ]]; then
            # Everything else deploys to its own branch deployment
            : "${{ github.ref }}"
            : ${_%%\/merge}  # Remove 'merge' at the end
            : ${_//refs\/pull\/}  # Remove 'refs' at the beginning
            TARGET="Pull request #${_}"
          else
            TARGET="${{ github.ref_name }}"
          fi

          # Publish to cloudflare using wrangler, tee'ing the output to a file
          pnpm dlx wrangler pages publish --project-name="$CF_PROJECT_NAME" \
            www/ --branch="$TARGET" --commit-dirty=true | tee wrangler.out

          # Parse the output URL
          TARGET_URL=$(grep -oE "https?://.+" wrangler.out | tail -n1)
          if [[ "$TARGET_URL" ]]; then
            echo "::set-output name=url::$TARGET_URL"
          else
            echo "Failed to find URL for deployment"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_PROJECT_NAME: qendil
